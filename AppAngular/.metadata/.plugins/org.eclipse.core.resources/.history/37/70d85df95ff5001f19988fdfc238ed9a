package br.com.dnl.AppAngular.Resource;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.dnl.AppAngular.Model.Pessoas;
import br.com.dnl.AppAngular.Service.PessoasService;
import org.springframework.web.bind.annotation.RequestBody;


@RestController
@RequestMapping("/api/pessoas")
@CrossOrigin(origins = "http://localhost:4200")
public class PessoasResource {


	@Autowired
	PessoasService pessoaService;
	
	
	// ----- SALVAR -------------------------------------------------------------
	
	@PostMapping // POST http://localhost:8080/api/pessoas
	public ResponseEntity<Pessoas> save(@RequestBody Pessoas pessoa) {
	    Pessoas newPessoa = pessoaService.save(pessoa);
	    return ResponseEntity.status(HttpStatus.CREATED).body(newPessoa);
	}


	// ----- ENCONTRAR POR ID -------------------------------------------------------------

	@GetMapping("/{id}") // GET http://localhost:8080/api/pessoas/{id}
	public ResponseEntity<Optional<Pessoas>> findById(@PathVariable Long id){
		Optional<Pessoas> pessoa = pessoaService.findById(id);
		if(pessoa.isEmpty()) { 
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build(); 
		}
			return ResponseEntity.status(HttpStatus.OK).body(pessoa);
		}

	// ----- LISTAGEM -------------------------------------------------------------
	
		@GetMapping // GET http://localhost:8080/api/pessoas
		public ResponseEntity<List<Pessoas>> findAll() {
		    List<Pessoas> findpessoas = pessoaService.findAll();
		    
		    if (findpessoas.isEmpty()) { 
		        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		    }

		    return ResponseEntity.status(HttpStatus.OK).body(findpessoas);  
		}
		
		
	// ----- ATUALIZAR -------------------------------------------------------------
	
	@PutMapping("/{id}") //PUT http://localhost:8080/api/pessoas/{id}
	public ResponseEntity<Pessoas> update(@PathVariable Long id, @RequestBody Pessoas pessoa){
	
		Optional<Pessoas> pessoas = pessoaService.findById(id);
		if (pessoas == null) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build(); 
		}
			Pessoas updPessoa = pessoaService.update(id, pessoa);
		if(updPessoa == null) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		}
			return ResponseEntity.status(HttpStatus.OK).body(updPessoa);		
		}
	
	// ----- DELETAR -------------------------------------------------------------
	
	@DeleteMapping("/{id}") //DELETE http://localhost:8080/api/pessoas/{id}
	public ResponseEntity<?> delete(@PathVariable Long id) {
	    pessoaService.delete(id);
		return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}
	
}	
	
	
	