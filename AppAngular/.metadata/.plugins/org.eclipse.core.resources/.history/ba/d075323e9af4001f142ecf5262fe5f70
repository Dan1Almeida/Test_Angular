package br.com.dnl.AppAngular.Service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.dnl.AppAngular.Model.Pessoas;
import br.com.dnl.AppAngular.Repository.PessoasRepository;

@Service
public class PessoasService {

	@Autowired
	private PessoasRepository pessoaRepository;
	
	
	// ----- SALVAR -------------------------------------------------------------
	
		public Pessoas save(Pessoas pessoa) {
			
			if(pessoa.getNome() == null)
			{
				System.out.println("Nome inserido de forma inválida.");
				return null;
			}
			
			if(pessoa.getCep() == null)
			{
				System.out.println("CEP inserido de forma inválida.");
				return null;
			}
			
			if(pessoa.getEndereco() == null)
			{
				System.out.println("Endereço inserido de forma inválida.");
				return null;
			}
			
			if(pessoa.getBairro() == null)
			{
				System.out.println("Bairro inserido de forma inválida.");
				return null;
			}
			
			if(pessoa.getCidade() == null)
			{
				System.out.println("Cidade inserido de forma inválida.");
				return null;
			}
			
			if(pessoa.getUf() == null)
			{
				System.out.println("UF inserido de forma inválida.");
				return null;
			}
			
			return pessoaRepository.save(pessoa);
		}
		
	// ----- ENCONTRAR POR ID -------------------------------------------------------------
	public Optional<Pessoas> findById(Long id){
		return pessoaRepository.findById(id); 
	}
	
	// ----- LISTAGEM -------------------------------------------------------------
	public List<Pessoas> findAll() {
		System.out.println("Lista retornada com sucesso");
		return pessoaRepository.findAll();
	}
	
	// ----- ATUALIZAR -------------------------------------------------------------
		public Pessoas update(Long id, Pessoas pessoa) {
		    Optional<Pessoas> findPessoa = pessoaRepository.findById(id);

		    if (findPessoa.isPresent()) {
		        Pessoas updPessoa = findPessoa.get();

				if(pessoa.getNome() == null)
				{
					System.out.println("Nome inserido de forma inválida.");
					return null;
				}
		        updPessoa.setNome(pessoa.getNome());
	    //-------------------------------------------------------------------------------------------
		        	        
		        if(pessoa.getCep() == null)
				{
					System.out.println("CEP inserido de forma inválida.");
					return null;
				}
				updPessoa.setCep(pessoa.getCep());
		//-------------------------------------------------------------------------------------------
		        
				if(pessoa.getEndereco() == null)
				{
					System.out.println("Endereço inserido de forma inválida.");
					return null;
				}
				updPessoa.setEndereco(pessoa.getEndereco());
		//-------------------------------------------------------------------------------------------

				if(pessoa.getBairro() == null)
				{
					System.out.println("Bairro inserido de forma inválida.");
					return null;
				}
		        updPessoa.setBairro(pessoa.getBairro());
	    //-------------------------------------------------------------------------------------------
		        
				if(pessoa.getCidade() == null)
				{
					System.out.println("Cidade inserido de forma inválida.");
					return null;
				}
				updPessoa.setCidade(pessoa.getCidade());
		//-------------------------------------------------------------------------------------------
				
				if(pessoa.getUf() == null)
				{
					System.out.println("UF inserido de forma inválida.");
					return null;
				}
		        updPessoa.setUf(pessoa.getUf());

		        return pessoaRepository.save(updPessoa); 
 
		    }
	    //-------------------------------------------------------------------------------------------
			System.out.println("Pessoa atualizada com sucesso [" +
					"Nome:" + 			pessoa.getNome() + 				"," +
					" CPF:" + 			pessoa.getCpf() + 				"," +
					" Tipo de Log:" + 	pessoa.getOrderLogradouro() + 	"," +
					" Endereço:" + 		pessoa.getEndereco() + 			"," +
					" Número:" + 		pessoa.getNumero() + 			"," +
					" CEP:" + 			pessoa.getCep() + 				"," +
					" Cidade:" + 		pessoa.getCidade() + 			"," +
					" UF:" + 			pessoa.getOrderUf() + 			"]");
	        return pessoaRepository.save(updPessoa); 
	    }
    //-------------------------------------------------------------------------------------------


		System.out.println("ID não encontrado, Pessoa gravada com sucesso [" +
				"Nome:" + 			pessoa.getNome() + 				"," +
				"CPF:" + 			pessoa.getCpf() + 				"," +
				" Tipo de Log:" + 	pessoa.getOrderLogradouro() + 	"," +
				" Endereço:" + 		pessoa.getEndereco() + 			"," +
				" Número:" + 		pessoa.getNumero() + 			"," +
				" CEP:" + 			pessoa.getCep() + 				"," +
				" Cidade:" + 		pessoa.getCidade() + 			"," +
				" UF:" + 			pessoa.getOrderUf() + 			"]");
	    return pessoaRepository.save(pessoa);         
	}
	}
		
		// ----- DELETAR -------------------------------------------------------------	
		public void delete(Long id) {
			System.out.println("Id " + "[" + id +"]"+ " Deletado com sucesso");
			pessoaRepository.deleteById(id);
		}
}
		
		
		
		
		
		

